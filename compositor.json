{
  "name": "expandtheroom/jquery-infinite-scroll-helper",
  "version": "0.1.4",
  "libraries": {
    "xv": "^1.1.25"
  },
  "title": "Infinite Scroll Helper",
  "branch": "master",
  "style": {
    "name": "Material",
    "componentSet": {
      "nav": "nav/DarkAbsoluteNav",
      "header": "header/GradientHeader",
      "article": "article/BasicArticle",
      "footer": "footer/BasicFooter"
    },
    "fontFamily": "Roboto, sans-serif",
    "heading": {
      "fontWeight": 500,
      "letterSpacing": "-0.01em"
    },
    "colors": {
      "text": "#212121",
      "background": "#fff",
      "primary": "#2196f3",
      "secondary": "#1565c0",
      "highlight": "#ff4081",
      "border": "#e0e0e0",
      "muted": "#f5f5f5"
    },
    "layout": {
      "centered": true,
      "bannerHeight": "80vh",
      "maxWidth": 896
    }
  },
  "content": [
    {
      "component": "nav",
      "links": [
        {
          "href": "https://github.com/expandtheroom/jquery-infinite-scroll-helper",
          "text": "GitHub"
        },
        {
          "href": "https://npmjs.com/package/jquery-infinite-scroll-helper",
          "text": "npm"
        }
      ]
    },
    {
      "component": "header",
      "heading": "jQuery Infinite Scroll Helper",
      "subhead": "A lightweight implementation of the infinite scroll mechanic.  By providing two essential callbacks, loadMore and doneLoading, the jQuery Infinite Scroll Helper plugin makes it a breeze to add infinite scrolling functionality to your page.",
      "children": [
        {
          "component": "ui/TweetButton",
          "text": "jquery-infinite-scroll-helper: A lightweight implementation of the infinite scroll mechanic.  By providing two essential callbacks, loadMore and doneLoading, the jQuery Infinite Scroll Helper plugin makes it a breeze to add infinite scrolling functionality to your page.",
          "url": null
        },
        {
          "component": "ui/GithubButton",
          "user": "expandtheroom",
          "repo": "jquery-infinite-scroll-helper"
        }
      ],
      "text": "v1.2.5",
      "backgroundImage": "",
      "links": [],
      "image": ""
    },
    {
      "component": "article",
      "metadata": {
        "source": "github.readme"
      },
      "html": "<h1>jQuery Infinite Scroll Helper</h1>\n\n<h2>Options</h2>\n<h3>bottomBuffer</h3>\n<p><em>(number)</em> The number of pixels from the bottom of the window in which the <code>loadMore</code> callback should be invoked.  The default is 0.</p>\n<h3>debounceInt</h3>\n<p><em>(number)</em> The interval, in milliseconds, that the scroll event handler will be debounced.</p>\n<h3>doneLoading</h3>\n<p><em>(function)</em> A callback that must return <code>true</code> or <code>false</code>, signaling whether loading has completed. This callback is passed a <code>pageCount</code> argument.</p>\n<h3>interval</h3>\n<p><em>(number)</em> The interval, in milliseconds, that the doneLoading callback will be called by the plugin. It will stop being called once it returns <code>true</code>. The default is 300.</p>\n<h3>loadingClass</h3>\n<p><em>(string)</em> The class that will be added to the target element once <code>loadMore</code> has been invoked. The default is <code>loading</code>.</p>\n<h3>loadingClassTarget</h3>\n<p><em>(string)</em> A selector targeting the element that will receive the class specified by the <code>loadingClass</code> option.</p>\n<h3>loadMore</h3>\n<p><em>(function)</em> A callback function that is invoked when the scrollbar eclipses the bottom threshold of the element being scrolled.  This callback is passed two arguments:</p>\n<ul>\n<li><code>pageCount</code>: The page number to loaded. This can be helpful when making requests to endpoints that require a page number.</li>\n<li><code>done</code>: A callback function that should be called when loading has completed. This is an alternative way to signal that you are done loading instead of defining the <code>doneLoading</code> callback.</li>\n</ul>\n<h3>loadMoreDelay</h3>\n<p><em>(number)</em> The amount of time, in milliseconds, before the loadMore callback is invoked once the bottom of the scroll container has been reached.</p>\n<h3>scrollContainer</h3>\n<p><em>(string|HTMLElement)</em> If provided, the element that the scroll listener will be attached to. This can either be a selector or a DOM element reference.\nIf not specified, the plugin will try to find the first scrollable parent if the element itself is not scrollable.</p>\n<h3>startingPageCount</h3>\n<p><em>(number)</em> The starting page count that the plugin will increment each time the <code>loadMore</code> callback is invoked. The default is 1.</p>\n<h3>triggerInitialLoad</h3>\n<p><em>(boolean)</em> Whether or not the plugin should make an initial call to the <code>loadMore</code> callback. This can be set to <code>true</code> if, for instance, you need to load the initial content asynchronously on page load.</p>\n<h2>Methods</h2>\n<h3>destroy</h3>\n<p>Destroys the plugin instance, removing all internal listeners and nullifying any external references.</p>\n<pre><span class=\"hljs-variable\">$(</span>selector).infiniteScrollHelper(<span class=\"hljs-string\">&apos;destroy&apos;</span>);</pre><h2>Usage</h2>\n<pre>$(<span class=\"hljs-string\">&apos;#my-element-to-watch&apos;</span>).infiniteScrollHelper({\n    <span class=\"hljs-attr\">loadMore</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">page</span>) </span>{\n        <span class=\"hljs-comment\">// load some data, parse some data</span>\n    },\n\n    <span class=\"hljs-attr\">doneLoading</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-comment\">// return true if you are done doing your thing, false otherwise</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n});</pre><p>or when using the <code>done</code> argument instead of the <code>doneLoading</code> callback</p>\n<pre>$(<span class=\"hljs-string\">&apos;#my-element-to-watch&apos;</span>).infiniteScrollHelper({\n    <span class=\"hljs-attr\">loadMore</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">page, done</span>) </span>{\n        <span class=\"hljs-comment\">// you should use the page argument to either select an anchor/href and load</span>\n        <span class=\"hljs-comment\">// the contents of that url or make a call to an API that accepts a page number</span>\n\n        <span class=\"hljs-keyword\">var</span> nextPageUrl = $(<span class=\"hljs-string\">&apos;.pagination a&apos;</span>).eq(page - <span class=\"hljs-number\">1</span>).attr(<span class=\"hljs-string\">&apos;href&apos;</span>);\n\n        $.get(nextPageUrl, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{\n            $(data).find(<span class=\"hljs-string\">&apos;.items&apos;</span>).appendTo(<span class=\"hljs-string\">&apos;#my-element-to-watch&apos;</span>);\n            <span class=\"hljs-comment\">// call the done callback to let the plugin know you are done loading</span>\n            done();\n        });\n\n        <span class=\"hljs-comment\">// or an API perhaps</span>\n        $.getJSON(<span class=\"hljs-string\">&apos;http://myawesomeapi.com/data?p=&apos;</span> + page, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{\n            <span class=\"hljs-comment\">// parse json data and create new html then append</span>\n\n            done();\n        });\n    }\n});</pre><p>The plugin can also be instantiated using constructor invocation</p>\n<pre>new InfiniteScrollHelper(<span class=\"hljs-symbol\">$</span>(<span class=\"hljs-string\">&apos;#my-element-to-watch&apos;</span>)[<span class=\"hljs-number\">0</span>], <span class=\"hljs-keyword\">options</span>);</pre><h4>IE6/7 Note</h4>\n<p>There will most likely be an issue with the scroll offset calculation when calling the plugin direclty on an element that is set to overflow: scroll-y in IE 6 &amp; 7. In this case, it is best to wrap the children of the element in a container and call the plugin on this container instead.</p>\n<h2>Dependencies</h2>\n<ul>\n<li>jQuery 1.7.0+</li>\n</ul>\n<h2>Changelog</h2>\n<h3>1.2.4</h3>\n<ul>\n<li>Fixed issue where loading class would not be removed after calling the done callback synchronously.</li>\n<li>Removed jQuery plugin repo JSON file.</li>\n<li>Added .editorconfig file.</li>\n</ul>\n<h3>1.2.3</h3>\n<ul>\n<li>Added a <code>scrollContainer</code> option.</li>\n<li>Added unit tests.</li>\n</ul>\n<h3>1.2.2</h3>\n<ul>\n<li>Changed how the scrollable element is detected by accounting for overflow scroll OR auto.</li>\n<li>Fixed issue where position fixed elements would not trigger the <code>loadMore</code> callback when the window was scrolled past y0.</li>\n</ul>\n<h3>1.2.1</h3>\n<ul>\n<li>Updated bower.json homepage URL to point to Github page.</li>\n</ul>\n<h3>1.2.0</h3>\n<ul>\n<li>Added a <code>loadMoreDelay</code> option. This allows you to set a delay before the <code>loadMore</code> callback is invoked.</li>\n<li>Fixed issue where calling destroy before the plugin was instantiated would cause unintentional instantiation of plugin.</li>\n<li>Added plugin as package on Bower.</li>\n</ul>\n<h3>1.1.0</h3>\n<ul>\n<li>Fixed/added the ability to use the plugin on elements with overflow scroll. Previously the plugin only worked when the element being watched was scrolled within the window.</li>\n<li>A <code>done</code> argument is now passed to the <code>loadMore</code> callback. You can invoke this callback to signal that you are done loading content instead of defining the <code>doneLoading</code> callback option.</li>\n<li>Added the <code>debounceInt</code> option. The plugin now uses debouncing for the scroll event. You can specify the interval if you want it to be different than the default 100ms.</li>\n<li>Added a <code>loadingClassTarget</code> option.</li>\n<li>Added a <code>startingPageCount</code> option.</li>\n<li>Added a <code>triggerInitialLoad</code> option.</li>\n</ul>\n<h3>1.0.5</h3>\n<ul>\n<li>Fixed issue #4 - destroy method was not properly destroying instance which prevented another instance from being created</li>\n</ul>\n<h3>1.0.4</h3>\n<ul>\n<li>The <code>doneLoading</code> callback now receives pageCount as a parameter.</li>\n</ul>\n<h3>1.0.3</h3>\n<ul>\n<li>Changed details in manifest file.</li>\n<li>Doc updates.</li>\n</ul>\n<h3>1.0.2</h3>\n<ul>\n<li>Fixed manifest file keyword error.</li>\n</ul>\n<h3>1.0.1</h3>\n<ul>\n<li>Regenerated minified/production script to match development version.</li>\n</ul>\n<h3>1.0.0</h3>\n<ul>\n<li>Initial Release.</li>\n</ul>\n<h2>License</h2>\n<p>Copyright (c) 2014 Expand The Room, LLC</p>\n<p>Licensed under the MIT license.</p>\n"
    },
    {
      "component": "footer",
      "links": [
        {
          "href": "https://github.com/expandtheroom/jquery-infinite-scroll-helper",
          "text": "GitHub"
        },
        {
          "href": "https://github.com/expandtheroom",
          "text": "expandtheroom"
        }
      ]
    }
  ]
}